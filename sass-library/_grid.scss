@use "sass:math";

// creating a grid but using FLEX

$grid-cols: 12;
$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);
$layout-values: (
  "start": flex-start,
  "end": flex-end,
  "center": center,
  "between": space-between,
  "around": space-around,
);

// base layout classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.row {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

// grid gaps

@each $key, $value in $grid-gaps {
  .gap-#{$key} {
    gap: $value;
  }
}

//justify content classes
@each $key, $value in $layout-values {
  .jc-#{$key} {
    justify-content: $value;
  }
}

// col classes
// -23px on width accounts for the 30px grid gap...
// his way was too hackey for me...

@include xs {
  // .col-sx-1 through .col-sm-12
  @for $i from 1 through $grid-cols {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: calc(math.div($i * 100%, $grid-cols) - 23px);
    }
  }
}
@include sm {
  // .col-sx-1 through .col-sm-12
  @for $i from 1 through $grid-cols {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: calc(math.div($i * 100%, $grid-cols) - 23px);
    }
  }
}
@include md {
  // .col-sx-1 through .col-sm-12
  @for $i from 1 through $grid-cols {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: calc(math.div($i * 100%, $grid-cols) - 23px);
    }
  }
}
@include lg {
  // .col-sx-1 through .col-sm-12
  @for $i from 1 through $grid-cols {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: calc(math.div($i * 100%, $grid-cols) - 23px);
    }
  }
}
@include xl {
  // .col-sx-1 through .col-sm-12
  @for $i from 1 through $grid-cols {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: calc(math.div($i * 100%, $grid-cols) - 23px);
    }
  }
}
